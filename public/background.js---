importScripts("js/Group.js")

class TabsGrouper {
	groups = []
	activeGroupIndex = undefined

	constructor() {
		this.getLocalStorage()
			.then(() => {
				this.initListeners()
			})
	}

	/* Инициализация слушателей */
	async initListeners() {
		await chrome.runtime.onMessage.addListener(this.onMessageListener)
		await chrome.tabs.onCreated.addListener(this.onCreatedListener)
		await chrome.tabs.onUpdated.addListener(this.onUpdatedListener)
	}
	/* /Инициализация слушателей */

	onMessageListener(message, sender, callback) {
		switch (message.function) {
			case 'getGroups':
				callback(TG.groups)
				return true
			case 'openGroup':
				TG.openGroup(message.openGroupId)
				return true
				break
			case 'createGroup':
				TG.createGroup()
					.then(group => {
						callback(group)
						TG.setLocalStorage()
					})
				return true
				break
			case 'updateGroup':
				TG.updateGroup(message.groupData)
				return true
				break
			case 'deleteGroup':
				TG.deleteGroup(message.deleteGroupId)
				return true
				break
			default:
				return false
				break
		}
	}

	/* Открытие вкладки */
	async onCreatedListener(tab) {
		await chrome.tabs.onUpdated.removeListener(this.onUpdatedListener)

		if (TG.groups[TG.activeGroupIndex].tabs[tab.index] === undefined) {
			await TG.groups[TG.activeGroupIndex].addTab(tab)
		} else {
			TG.groups[TG.activeGroupIndex].insertTab(tab)
		}

		await chrome.tabs.onUpdated.addListener(this.onUpdatedListener)

		await TG.setLocalStorage()
	}
	/* /Открытие вкладки */

	/* Обновление вкладки */
	async onUpdatedListener(tabId, changeIndo, tabData) {
		if (changeIndo.status === 'complete' || changeIndo.title !== '') {
			if (TG.groups[TG.activeGroupIndex].tabs.length && TG.groups[TG.activeGroupIndex].tabs[tabData.index] !== undefined) {
				await TG.groups[TG.activeGroupIndex].updateTab(tabData.index, tabData)
			}
		}

		// if (changeIndo.status === 'complete' || changeIndo.title !== '') {
		// 	if (TG.groups[TG.activeGroupIndex].tabs.length && TG.groups[TG.activeGroupIndex].tabs[tabData.index] !== undefined) {
		// 		await TG.groups[TG.activeGroupIndex].updateTab(tabData.index, tabData)
		// 	}
		// }
	}
	/* /Обновление вкладки */

	/* Открытие Группы */
	async openGroup(groupId) {
		await chrome.tabs.onCreated.removeListener(this.onCreatedListener)
		await chrome.tabs.onUpdated.removeListener(this.onUpdatedListener)

		this.groups[this.activeGroupIndex].active = false

		for (let i in this.groups) {
			if (this.groups[i].id === groupId) {
				this.groups[i].active = true
				this.activeGroupIndex = Number(i)
			}
		}

		let tabs = await chrome.tabs.query({ currentWindow: true })
		if (this.groups[this.activeGroupIndex].tabs.length === 0) {
			await chrome.tabs.create({ url: 'chrome://newtab', active: true })
			for (let tab of tabs) {
				await chrome.tabs.remove(tab.id)
			}
		} else if (this.groups[this.activeGroupIndex].tabs.length >= tabs.length) {
			for (let i in this.groups[this.activeGroupIndex].tabs) {
				if (tabs[i] !== undefined) {
					await chrome.tabs.update(tabs[i].id, {
						url: this.groups[this.activeGroupIndex].tabs[i].url || 'chrome://newtab',
						active: this.groups[this.activeGroupIndex].tabs[i].active || false
					})
				} else {
					await chrome.tabs.create({
						url: this.groups[this.activeGroupIndex].tabs[i].url || 'chrome://newtab',
						active: this.groups[this.activeGroupIndex].tabs[i].active || false
					})
				}
			}
		} else {
			for (let i in tabs) {
				if (this.groups[this.activeGroupIndex].tabs[i] !== undefined) {
					await chrome.tabs.update(tabs[i].id, {
						url: this.groups[this.activeGroupIndex].tabs[i].url || 'chrome://newtab',
						active: this.groups[this.activeGroupIndex].tabs[i].active || false
					})
				} else {
					await chrome.tabs.remove(tabs[i].id)
				}
			}
		}

		await chrome.tabs.onCreated.addListener(this.onCreatedListener)
		await chrome.tabs.onUpdated.addListener(this.onUpdatedListener)

		await this.setLocalStorage()
	}
	/* /Открытие Группы */

	/* Создание Группы */
	async createGroup() {
		await chrome.tabs.onCreated.removeListener(this.onCreatedListener)
		await chrome.tabs.onUpdated.removeListener(this.onUpdatedListener)

		let newGroup = new Group()

		if (this.groups.length === 0) {
			newGroup.active = true
			this.activeGroupIndex = 0

			let tabs = await chrome.tabs.query({ currentWindow: true })
			for (let tab of tabs) {
				await newGroup.addTab(tab)
			}
		} else {
			newGroup.active = false
			newGroup.addTab({
				id: '',
				url: 'chrome://newtab',
				title: 'New Tab',
				active: true,
				index: 0,
				favIconUrl: ''
			})
		}

		this.groups.push(newGroup)

		await chrome.tabs.onCreated.addListener(this.onCreatedListener)
		await chrome.tabs.onUpdated.addListener(this.onUpdatedListener)

		return newGroup
	}
	/* /Создание Группы */

	/* Обновление Группы */
	async updateGroup(groupData) {
		for (let i in this.groups) {
			if (this.groups[i].id === groupData.id) {
				this.groups[i].update(groupData)
				await this.setLocalStorage()
				return true
			}
		}
	}
	/* /Обновление Группы */

	/* Удаление Группы */
	async deleteGroup(groupId) {
		for (let i in this.groups) {
			if (this.groups[i].id === groupId) {
				this.groups.splice(i, 1)

				if (Number(this.activeGroupIndex) === Number(i)) {
					this.activeGroupIndex = undefined
				}

				return await this.setLocalStorage()
			}
		}
	}
	/* /Удаление Группы */

	/* Получение из localStorage */
	async getLocalStorage() {
		let storage = await chrome.storage.local.get(['TabsGrouper'])
		if (storage !== undefined && storage.TabsGrouper !== undefined) {
			this.activeGroupIndex = storage.TabsGrouper.activeGroupIndex
			for (let storageGroup of storage.TabsGrouper.groups) {
				this.groups.push(new Group(storageGroup))
			}
		} else {
			await this.setLocalStorage()
		}
	}
	/* /Получение из localStorage */

	/* Запись в localStorage */
	async setLocalStorage() {
		return await chrome.storage.local.set({ 'TabsGrouper': this })
	}
	/* /Запись в localStorage */

	/* Конвертация фавиконки сайта в base64 */
	faviconToBase64(favIconUrl, callback) {
		fetch(favIconUrl)
			.then(response => response.blob())
			.then(blob => {
				let reader = new FileReader()
				reader.onloadend = () => {
					callback(reader.result)
				}
				reader.readAsDataURL(blob)
			})
			.catch(error => { callback(favIconUrl) })
	}
	/* /Конвертация фавиконки сайта в base64 */

	/* Генерация рандомного id для групп */
	generateId(length) {
		let result = '';
		let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
		let charactersLength = characters.length;
		for (let i = 0; i < length; i++) {
			result += characters.charAt(Math.floor(Math.random() * charactersLength));
		}
		return result;
	}
	/* /Генерация рандомного id для групп */
}

const TG = new TabsGrouper()
class Group {
	constructor(options = undefined) {
		if (typeof options === 'undefined') {
			this.id = TG.generateId(8)
			this.name = `Group ${TG.groups.length + 1}`
			this.index = Number(TG.groups.length)
			this.tabs = []
		} else if (typeof options === 'object') {
			this.id = options.id
			this.name = options.name
			this.index = options.index
			this.tabs = options.tabs || []
		}
	}

	update(groupData) {
		for (let key in groupData) {
			this[key] = groupData[key]
		}
	}

	addTab(tabData) {
		if (
			!tabData ||
			typeof tabData !== 'object' ||
			tabData.pinned
		) return false

		let newTab = {
			id: tabData.id,
			url: tabData.url ? tabData.url : 'chrome://newtab',
			title: tabData.title,
			active: tabData.active,
			index: tabData.index,
			favIconUrl: tabData.favIconUrl
		}

		this.tabs[tabData.index] = newTab

		setTimeout(() => {
			TG.faviconToBase64(tabData.favIconUrl, base64 => {
				this.tabs[tabData.index].favIconUrl = base64
			})
		}, 1)
	}

	updateTab(tabData) {
		this.tabs[tabData.index] = {
			id: tabData.id,
			url: tabData.url ? tabData.url : 'chrome://newtab',
			title: tabData.title,
			active: tabData.active,
			index: tabData.index,
			favIconUrl: tabData.favIconUrl
		}

		setTimeout(() => {
			TG.faviconToBase64(tabData.favIconUrl, base64 => {
				this.tabs[tabData.index].favIconUrl = base64
			})
		}, 1)
	}
}